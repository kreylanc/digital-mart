import { publicProcedure } from "./../trpc";
import { router } from "../trpc";
import {
  registerValidator,
  signinValidator,
} from "../../lib/validators/acc-credential-validation";
import { getPayloadClient } from "../../get-payload";
import { TRPCError } from "@trpc/server";
import { z } from "zod";

export const authRouter = router({
  /*  end point/procedure for registering
      check for input validation
     */
  createUser: publicProcedure
    .input(registerValidator)
    .mutation(async ({ input }) => {
      // destruct the input
      const { email, password } = input;

      const payload = await getPayloadClient();

      // search db if user already exists
      const { docs: user } = await payload.find({
        collection: "users",
        where: {
          email: {
            equals: email,
          },
        },
      });

      //   if exists, throw an error
      if (user.length !== 0)
        throw new TRPCError({
          code: "CONFLICT",
          message: "User already exists",
        });

      // else create a new user
      await payload.create({
        collection: "users",
        data: {
          email,
          password,
          role: "user",
        },
      });

      return { success: true, sentToEmail: email };
    }),
  /* Procedure for verifying user by email
   * Takes a token (generated by payload) as an argument
   */
  verifyEmail: publicProcedure
    .input(z.object({ token: z.string() }))
    .query(async ({ input }) => {
      const { token } = input;

      const payload = await getPayloadClient();

      const verified = await payload.verifyEmail({
        collection: "users",
        token,
      });

      if (!verified) throw new TRPCError({ code: "UNAUTHORIZED" });

      return { success: true };
    }),

  /* For signing in user */
  signIn: publicProcedure
    .input(signinValidator)
    .mutation(async ({ input, ctx }) => {
      const { email, password } = input;
      const { res } = ctx;

      const payload = await getPayloadClient();

      try {
        // using payload login operation
        // returns the user and token
        await payload.login({
          collection: "users",
          data: {
            email,
            password,
          },
          // pass express res to set the cookie for authentication
          res,
        });

        return { success: true };
      } catch (error) {
        throw new TRPCError({
          code: "UNAUTHORIZED",
          message: "Password and email does not match.",
        });
      }
    }),
});
